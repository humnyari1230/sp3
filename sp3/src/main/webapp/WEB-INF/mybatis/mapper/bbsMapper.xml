<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="bbs">
	<insert id="insertBoard" parameterType="com.sp.bbs.Board">
		INSERT INTO bbs(num, userId, subject, content,
	          saveFilename, originalFilename) VALUES
	         (bbs_seq.NEXTVAL, #{userId}, #{subject}, #{content},
	           #{saveFilename, jdbcType=VARCHAR}, 
	           #{originalFilename, jdbcType=VARCHAR}
	         )
	</insert>

	<!--
	  * ${} 는 테이블명 이나 컬럼명이 동적일때 테이블명 또는 컬럼명에 사용하고,
	        값부분은 반드시 #{} 로 사용하며,
        #{} 는 ? 로 치환되고 쿼리는 PreparedStatement 객체로 실행한다.
    -->
	<!--
       * INSTR() 함수 대신 LIKE 를 사용하는 경우
          subject LIKE '%' || #{keyword} || '%'
       * CLOB인 경우 검색(LIKE 사용하지 말것)
          DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 
	-->	
	<sql id="where-list">
		<choose>
			<when test="condition == 'all' ">
			   ( INSTR(subject, #{keyword}) &gt; 0
		          OR DBMS_LOB.INSTR(content, #{keyword}) &gt; 0 )
			</when>
			<when test="condition == 'created' ">
			   ( TO_CHAR(created, 'YYYYMMDD') = #{keyword}
		          OR TO_CHAR(created, 'YYYY-MM-DD') = #{keyword} )
			</when>
			<when test="condition == 'content'">
			    DBMS_LOB.INSTR(content, #{keyword}) &gt; 0
			</when>
			<otherwise>
			    INSTR(${condition}, #{keyword}) &gt; 0
			</otherwise>
		</choose>
	</sql>

	<!-- 글개수 -->
	<select id="dataCount" parameterType="map" resultType="Integer">
		SELECT NVL(COUNT(*), 0)
		FROM bbs b
		JOIN member1 m ON b.userId=m.userId
		<where>
			<if test="keyword!=null and keyword!='' ">
				<include refid="where-list"/>
			</if>
		</where>   
	</select>

	<!-- 글리스트 -->
	<select id="listBoard" parameterType="map" resultType="com.sp.bbs.Board">
		SELECT b.num, b.userId, userName, subject, 
		       TO_CHAR(b.created, 'YYYY-MM-DD') created,
		       hitCount, saveFilename, nvl(replyCount, 0) replyCount
		FROM bbs b
		JOIN member1 m ON b.userId=m.userId
		left outer join (
			select num, count(*) replyCount from bbsReply
			where answer=0
			group by num
		) c on b.num = c.num
		<where>
			<if test="keyword != null and keyword != ''">
				<include refid="where-list"/>
			</if>
		</where>
		ORDER BY num DESC
		OFFSET #{offset} ROWS FETCH FIRST #{rows} ROWS ONLY
	</select>

	<!-- 글보기 -->
	<select id="readBoard" parameterType="Integer" resultType="com.sp.bbs.Board">
		SELECT b.num, b.userId, userName, subject, content,
			   hitCount, b.created,  saveFilename, originalFilename
		FROM bbs b
		JOIN member1 m ON b.userId=m.userId
		WHERE b.num = #{num}
	</select>
	
	<!-- 조회수 증가 -->
	<update id="updateHitCount" parameterType="Integer">
		UPDATE bbs SET hitCount=hitCount+1 WHERE num = #{num}
	</update>
	
	<!-- AND 가 필요 없는 경우 자동으로 제거 됨 -->
	<!-- 이전글 -->
	<select id="preReadBoard" parameterType="map" resultType="com.sp.bbs.Board">
		SELECT num, subject
		FROM bbs b
		JOIN member1 m ON b.userId=m.userId
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
			AND (num &gt; #{num})
		</where>
		ORDER BY num ASC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<!-- 다음글 -->
	<select id="nextReadBoard" parameterType="map" resultType="com.sp.bbs.Board">
		SELECT num, subject
		FROM bbs b
		JOIN member1 m ON b.userId=m.userId
		<where>
			<if test="keyword != null and keyword != '' ">
				<include refid="where-list"/>
			</if>
			AND (num &lt; #{num})
		</where>
		ORDER BY num DESC
		FETCH FIRST 1 ROWS ONLY
	</select>

	<!-- 수정 -->
	<update id="updateBoard" parameterType="com.sp.bbs.Board">
		UPDATE bbs SET subject=#{subject}, content=#{content},
				saveFilename=#{saveFilename, jdbcType=VARCHAR},
				originalFilename=#{originalFilename, jdbcType=VARCHAR}
		WHERE num = #{num}
	</update>
      
	<!-- 삭제 -->
	<delete id="deleteBoard" parameterType="Integer">
		DELETE FROM bbs WHERE num = #{num}
	</delete>
	
	<!-- 게시글 좋아요 -->
	<insert id="insertBoardLike" parameterType="map">
		insert into bbsLike(num, userId) values (#{num}, #{userId})
	</insert>
	
	<!-- 게시글 좋아요 개수 -->
	<select id="boardLikeCount" parameterType="Integer" resultType="Integer">
		select count(*) from bbsLike where num=#{num}
	</select>
	
	<insert id="insertReply" parameterType="com.sp.bbs.Reply">
		insert into bbsReply(replyNum, num, userId, content, answer)
		values(bbsReply_seq.nextval, #{num}, #{userId}, #{content}, #{answer})
	</insert>
	
	<select id="replyCount" parameterType="map" resultType="Integer">
		select nvl(count(*), 0)
		from bbsReply
		where num=#{num} and answer=0
	</select>
	
	<select id="listReply" parameterType="map" resultType="com.sp.bbs.Reply">
		select r.replyNum, r.userId, userName, content, r.created,
				nvl(answerCount, 0) answerCount,
				nvl(likeCount, 0) likeCount,
				nvl(disLikeCount, 0) disLikeCount
		from bbsReply r
		join member1 m on r.userId = m.userId
		left outer join (
			select answer, count(*) answerCount
			from bbsReply where answer!=0 group by answer
		) a on r.replyNum = a.answer
		left outer join (
			select replyNum, count(decode(replyLike, 1, 1)) likeCount,
					count(decode(replyLike, 0, 1)) disLikeCount
			from bbsReplyLike group by replyNum
		) c on r.replyNum = c.replyNum
		where num=#{num} and r.answer=0
		order by r.replyNum desc
		offset #{offset} rows fetch first #{rows} rows only
	</select>
	
	<!-- 댓글의 답글 리스트 -->
	<select id="listReplyAnswer" parameterType="Integer" resultType="com.sp.bbs.Reply">
		select r.replyNum, r.userId, userName, content, r.created, answer
		from bbsReply r
		join member1 m on r.userId = m.userId
		where answer=#{answer}
		order by r.replyNum desc
	</select>
	
	<!-- 댓글의 답글 개수 -->
	<select id="replyAnswerCount" parameterType="Integer" resultType="Integer">
		select nvl(count(*), 0)
		from bbsReply
		where answer=#{answer}
	</select>
	
	<insert id="insertReplyLike" parameterType="map">
		insert into bbsReplyLike(replyNum, userId, replyLike) 
		values (#{replyNum}, #{userId}, #{replyLike})
	</insert>
	
	<select id="replyLikeCount" parameterType="map" resultType="map">
		select count(decode(replyLike, 1, 1)) likeCount,
			   count(decode(replyLike, 0, 1)) disLikeCount
		from bbsReplyLike
		where replyNum = #{replyNum}
	</select>
	
	<!-- 댓글 삭제 또는 답글 삭제 -->
	<delete id="deleteReply" parameterType="map">
		delete from bbsReply where
		<if test="mode=='reply'">
			replyNum in (
				select replyNum from bbsReply
					start with replyNum = #{replyNum}
					connect by prior replyNum = answer
			)
		</if>
		<if test="mode=='answer'">
			replyNum = #{replyNum}
		</if> 
	</delete>
	
</mapper>